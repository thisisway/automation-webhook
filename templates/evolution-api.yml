version: '3.8'

services:
  evolution-api:
    image: ${EVOLUTION_IMAGE:-atendai/evolution-api:latest}
    container_name: evolution_api_${CLIENT_NAME}
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      # Server Configuration
      - SERVER_URL=${SERVER_URL:-https://evolution-${CLIENT_NAME}.${DOMAIN}}
      - SERVER_PORT=${SERVER_PORT:-8080}
      - NODE_ENV=${NODE_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      - LOG_COLOR=${LOG_COLOR:-false}
      - LOG_BAILEYS=${LOG_BAILEYS:-error}
      
      # Database Configuration
      - DATABASE_ENABLED=${DATABASE_ENABLED:-true}
      - DATABASE_CONNECTION_URI=${DATABASE_URL}
      - DATABASE_CONNECTION_CLIENT_NAME=${CLIENT_NAME}
      
      # Redis Configuration
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_URI=${REDIS_URL}
      - REDIS_PREFIX_KEY=${REDIS_PREFIX_KEY:-evolution}
      
      # Authentication
      - AUTHENTICATION_TYPE=${AUTHENTICATION_TYPE:-apikey}
      - AUTHENTICATION_API_KEY=${API_KEY}
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=${AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES:-true}
      - AUTHENTICATION_JWT_EXPIRIN_IN=${AUTHENTICATION_JWT_EXPIRIN_IN:-3600}
      - AUTHENTICATION_JWT_SECRET=${AUTHENTICATION_JWT_SECRET:-L=0}
      
      # Global Webhook
      - WEBHOOK_GLOBAL_URL=${WEBHOOK_GLOBAL_URL:-}
      - WEBHOOK_GLOBAL_ENABLED=${WEBHOOK_GLOBAL_ENABLED:-false}
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=${WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS:-false}
      
      # Config Session Phone
      - CONFIG_SESSION_PHONE_CLIENT=${CONFIG_SESSION_PHONE_CLIENT:-Evolution API}
      - CONFIG_SESSION_PHONE_NAME=${CONFIG_SESSION_PHONE_NAME:-Chrome}
      - CONFIG_SESSION_PHONE_VERSION=${CONFIG_SESSION_PHONE_VERSION:-5.0}
      
      # QR Code Configuration
      - QRCODE_LIMIT=${QRCODE_LIMIT:-30}
      - QRCODE_COLOR=${QRCODE_COLOR:-#198754}
      
      # Instance Configuration
      - INSTANCE_CLEAN_STORE=${INSTANCE_CLEAN_STORE:-false}
      - INSTANCE_CLEAN_INSTANCES_TIME=${INSTANCE_CLEAN_INSTANCES_TIME:-7200}
      
      # ChatWoot Integration
      - CHATWOOT_ENABLED=${CHATWOOT_ENABLED:-false}
      - CHATWOOT_MESSAGE_READ=${CHATWOOT_MESSAGE_READ:-true}
      - CHATWOOT_MESSAGE_DELETE=${CHATWOOT_MESSAGE_DELETE:-true}
      - CHATWOOT_IMPORT_DATABASE_CONNECTION_URI=${CHATWOOT_DATABASE_URL:-}
      - CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE=${CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE:-false}
      
      # Typebot Integration
      - TYPEBOT_ENABLED=${TYPEBOT_ENABLED:-false}
      - TYPEBOT_API_VERSION=${TYPEBOT_API_VERSION:-old}
      
      # Proxy Configuration
      - PROXY_HOST=${PROXY_HOST:-}
      - PROXY_PORT=${PROXY_PORT:-}
      - PROXY_PROTOCOL=${PROXY_PROTOCOL:-}
      - PROXY_USERNAME=${PROXY_USERNAME:-}
      - PROXY_PASSWORD=${PROXY_PASSWORD:-}
      
      # S3/MinIO Storage
      - S3_ENABLED=${S3_ENABLED:-false}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-}
      - S3_BUCKET=${S3_BUCKET:-evolution}
      - S3_PORT=${S3_PORT:-9000}
      - S3_ENDPOINT=${S3_ENDPOINT:-}
      - S3_USE_SSL=${S3_USE_SSL:-true}
      
      # RabbitMQ
      - RABBITMQ_ENABLED=${RABBITMQ_ENABLED:-false}
      - RABBITMQ_URI=${RABBITMQ_URI:-}
      
      # Websocket
      - WEBSOCKET_ENABLED=${WEBSOCKET_ENABLED:-false}
      - WEBSOCKET_GLOBAL_EVENTS=${WEBSOCKET_GLOBAL_EVENTS:-false}
      
      # SQS
      - SQS_ENABLED=${SQS_ENABLED:-false}
      - SQS_ACCESS_KEY_ID=${SQS_ACCESS_KEY_ID:-}
      - SQS_SECRET_ACCESS_KEY=${SQS_SECRET_ACCESS_KEY:-}
      - SQS_ACCOUNT_ID=${SQS_ACCOUNT_ID:-}
      - SQS_REGION=${SQS_REGION:-}
      
      # Language
      - LANGUAGE=${LANGUAGE:-en}
      
    volumes:
      - evolution_instances_${CLIENT_NAME}:/evolution/instances
      - evolution_store_${CLIENT_NAME}:/evolution/store
    networks:
      - evolution_network
      - traefik
    deploy:
      resources:
        limits:
          cpus: '${EVOLUTION_CPU_LIMIT:-2.0}'
          memory: ${EVOLUTION_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${EVOLUTION_CPU_RESERVATION:-1.0}'
          memory: ${EVOLUTION_MEMORY_RESERVATION:-1G}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evolution-${CLIENT_NAME}.rule=Host(`evolution-${CLIENT_NAME}.${DOMAIN}`)"
      - "traefik.http.routers.evolution-${CLIENT_NAME}.entrypoints=websecure"
      - "traefik.http.routers.evolution-${CLIENT_NAME}.tls.certresolver=letsencrypt"
      - "traefik.http.services.evolution-${CLIENT_NAME}.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.evolution-${CLIENT_NAME}-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE,PATCH"
      - "traefik.http.middlewares.evolution-${CLIENT_NAME}-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.evolution-${CLIENT_NAME}-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.evolution-${CLIENT_NAME}-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.evolution-${CLIENT_NAME}-cors.headers.addvaryheader=true"

  postgres:
    image: ${POSTGRES_IMAGE:-postgres:15-alpine}
    container_name: evolution_postgres_${CLIENT_NAME}
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-evolution}
      - POSTGRES_USER=${POSTGRES_USER:-evolution}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_${CLIENT_NAME}:/var/lib/postgresql/data
    networks:
      - evolution_network
    deploy:
      resources:
        limits:
          cpus: '${POSTGRES_CPU_LIMIT:-1.0}'
          memory: ${POSTGRES_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${POSTGRES_CPU_RESERVATION:-0.5}'
          memory: ${POSTGRES_MEMORY_RESERVATION:-512M}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-evolution} -d ${POSTGRES_DB:-evolution}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: evolution_redis_${CLIENT_NAME}
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_${CLIENT_NAME}:/data
    networks:
      - evolution_network
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-0.5}'
          memory: ${REDIS_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '${REDIS_CPU_RESERVATION:-0.25}'
          memory: ${REDIS_MEMORY_RESERVATION:-256M}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  evolution_instances_${CLIENT_NAME}:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/${CLIENT_NAME}/instances
  evolution_store_${CLIENT_NAME}:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/${CLIENT_NAME}/store
  postgres_data_${CLIENT_NAME}:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/${CLIENT_NAME}/postgres
  redis_data_${CLIENT_NAME}:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/${CLIENT_NAME}/redis

networks:
  evolution_network:
    driver: bridge
  traefik:
    external: true
